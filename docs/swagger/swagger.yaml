basePath: /api
definitions:
  models.AllSkins:
    properties:
      skins:
        items:
          $ref: '#/definitions/models.Skin'
        type: array
    type: object
  models.Position:
    properties:
      id:
        example: 42
        type: integer
      nickname:
        example: Nick
        type: string
      record:
        example: 100500
        type: integer
    type: object
  models.PositionList:
    properties:
      players:
        items:
          $ref: '#/definitions/models.Position'
        type: array
      total:
        example: 1
        type: integer
    type: object
  models.Profile:
    properties:
      avatar:
        type: string
      coins:
        type: integer
      current_skin:
        type: integer
      draws:
        type: integer
      email:
        example: email@email.com
        type: string
      id:
        type: integer
      loss:
        type: integer
      nickname:
        example: Nick
        type: string
      password:
        example: password
        type: string
      record:
        type: integer
      skins:
        items:
          type: uint
        type: array
      win:
        type: integer
    type: object
  models.ProfileError:
    properties:
      field:
        example: nickname
        type: string
      text:
        example: This nickname is already taken.
        type: string
    type: object
  models.ProfileErrorList:
    properties:
      error:
        items:
          $ref: '#/definitions/models.ProfileError'
        type: array
    type: object
  models.RegisterProfile:
    properties:
      email:
        example: email@email.com
        type: string
      nickname:
        example: Nick
        type: string
      password:
        example: password
        type: string
    type: object
  models.RequestSkin:
    properties:
      skin:
        type: integer
    type: object
  models.Session:
    properties:
      session_id:
        example: ef84d238-47ef-4452-9536-99380db79911
        type: string
    type: object
  models.Skin:
    properties:
      cost:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
  models.UserPassword:
    properties:
      email:
        example: email@email.com
        type: string
      password:
        example: password
        type: string
    type: object
info:
  contact:
    email: aandreev06.1998@gmail.com
    name: Artyom Andreev
  description: This is a backend server for the game.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: The Ketnipz Game API
  version: "1.0"
paths:
  /profile:
    get:
      description: Получить профиль пользователя по ID, никнейму или из сессии
      operationId: get-profile
      parameters:
      - description: ID
        in: query
        name: id
        type: integer
      - description: Никнейм
        in: query
        name: nickname
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь найден, успешно
          schema:
            $ref: '#/definitions/models.Profile'
            type: object
        "400":
          description: Неправильный запрос
        "401":
          description: Не залогинен
        "404":
          description: Не найдено
        "500":
          description: Ошибка в бд
      summary: Получить профиль
    post:
      consumes:
      - application/json
      description: Зарегистрировать по никнейму, почте и паролю и автоматически залогинить
      operationId: post-profile
      parameters:
      - description: Никнейм, почта и пароль
        in: body
        name: Profile
        required: true
        schema:
          $ref: '#/definitions/models.RegisterProfile'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь зарегистрирован и залогинен успешно
        "400":
          description: Неверный формат JSON
        "403":
          description: 'Ошибки при регистрации: невалидна или занята почта, занят
            ник, пароль не удовлетворяет правилам безопасности, другие ошибки'
          schema:
            $ref: '#/definitions/models.ProfileErrorList'
            type: object
        "422":
          description: При регистрации не все параметры
        "500":
          description: Ошибка в бд
      summary: Зарегистрироваться и залогиниться по новому профилю
    put:
      consumes:
      - application/json
      description: Изменить профиль, должен быть залогинен
      operationId: put-profile
      parameters:
      - description: Новые никнейм, и/или почта, и/или пароль
        in: body
        name: Profile
        required: true
        schema:
          $ref: '#/definitions/models.RegisterProfile'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь найден, успешно изменены данные
        "400":
          description: Неверный формат JSON
        "401":
          description: Не залогинен
        "403":
          description: 'Ошибки при регистрации: невалидна или занята почта, занят
            ник, пароль не удовлетворяет правилам безопасности, другие ошибки'
          schema:
            $ref: '#/definitions/models.ProfileErrorList'
            type: object
        "500":
          description: Ошибка в бд
      summary: Изменить профиль
  /profile/avatar:
    delete:
      description: Удалить аватар, пользователь должен быть залогинен
      operationId: delete-avatar
      responses:
        "200":
          description: Удалена аватарка у пользователя
        "401":
          description: Не залогинен
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка в бд
      summary: Удалить аватар
    put:
      consumes:
      - multipart/form-data
      description: Загрузить или изменить уже существующий аватар
      operationId: put-avatar
      responses:
        "200":
          description: Удалена аватарка у пользователя
        "401":
          description: Не залогинен
        "404":
          description: Пользователь не найден
        "500":
          description: Ошибка при парсинге, в бд, файловой системе
      summary: Изменить аватар
  /profile/skin:
    get:
      description: 'Получить информацию о скине: ID, название и стоимость'
      operationId: get-skin
      parameters:
      - description: ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Скин/скины найдены
          schema:
            $ref: '#/definitions/models.AllSkins'
            type: object
        "400":
          description: Неправильный запрос
        "404":
          description: Не найдено
        "500":
          description: Ошибка в бд
      summary: Получить информацию об одном скине или обо всех
    post:
      consumes:
      - application/json
      description: Купить новый скин, монет должно быть достаточно для совершения
        покупки
      operationId: post-skin
      parameters:
      - description: Скин для покупки
        in: body
        name: Profile
        required: true
        schema:
          $ref: '#/definitions/models.RequestSkin'
          type: object
      responses:
        "200":
          description: Скин куплен (или уже есть)
        "400":
          description: Неверный формат JSON
        "401":
          description: Не залогинен, профиль не существует
        "404":
          description: Скин не найден
        "422":
          description: Недостаточно средств
        "500":
          description: Ошибка в бд
      summary: Купить новый скин
    put:
      consumes:
      - application/json
      description: Изменить скин, должен быть куплен
      operationId: put-skin
      parameters:
      - description: Скин, который надеваем
        in: body
        name: Profile
        required: true
        schema:
          $ref: '#/definitions/models.RequestSkin'
          type: object
      responses:
        "200":
          description: Пользователь найден, успешно надет скин, уже надет такой скин
        "400":
          description: Неверный формат JSON
        "401":
          description: Не залогинен, пользователь не существует
        "422":
          description: Скин не куплен
        "500":
          description: Ошибка в бд
      summary: Изменить скин
  /scoreboard:
    get:
      description: Получить таблицу лидеров (пагинация присутствует)
      operationId: get-scoreboard
      parameters:
      - description: Пользователей на страницу
        in: query
        name: Limit
        type: integer
      - description: Страница номер
        in: query
        name: Page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Таблицу лидеров или ее страница и общее количество
          schema:
            $ref: '#/definitions/models.PositionList'
            type: object
        "500":
          description: Ошибка в бд
      summary: Получить таблицу лидеров
  /session:
    delete:
      operationId: delete-session
      responses:
        "200":
          description: Успешный выход / пользователь уже разлогинен
      summary: Разлогинить
    get:
      description: Получить сессию пользователя, если есть сессия, то она в куке session_id
      operationId: get-session
      produces:
      - application/json
      responses:
        "200":
          description: Пользователь залогинен, успешно
          schema:
            $ref: '#/definitions/models.Session'
            type: object
        "401":
          description: Не залогинен
        "500":
          description: Ошибка в бд
      summary: Получить сессию
    post:
      consumes:
      - application/json
      description: Залогинить пользователя (создать сессию)
      operationId: post-session
      parameters:
      - description: Почта и пароль
        in: body
        name: UserPassword
        required: true
        schema:
          $ref: '#/definitions/models.UserPassword'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход / пользователь уже залогинен
          schema:
            $ref: '#/definitions/models.Session'
            type: object
        "400":
          description: Неверный формат JSON, невалидные данные
        "422":
          description: Неверная пара пользователь/пароль
        "500":
          description: Внутренняя ошибка
      summary: Залогинить
  /static/{path/to/file}:
    get:
      description: Отдать файл с диска
      operationId: get-static
      parameters:
      - description: Путь к файлу
        in: path
        name: PathToFile
        required: true
        type: string
      responses:
        "200":
          description: Файл найден
        "301":
          description: Редирект, если имя папки не заканчивается на /
        "403":
          description: Нет прав (сервер)
        "404":
          description: Файл не найден
        "500":
          description: Внутренняя ошибка
      summary: Отдать файл
swagger: "2.0"
